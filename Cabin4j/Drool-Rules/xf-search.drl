import java.lang.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;

import com.cabin4j.suite.platform.drools.service.DroolsService;
import com.cabin4j.suite.platform.integration.v1.data.PlatformIntegrationData;
import com.cabin4j.utility.SpringUtils;
import com.xhopfront.entities.SKU;
import com.xhopfront.service.XFSessionService;
import com.xhopfront.store.service.EntityManagerResolver;

import com.ondc.service.ContextulizeSearch;

global  SpringUtils springUtils;

rule "xf-search"
when
   $data : PlatformIntegrationData();
then




   		if (null != $data.getRequest() && null != $data.getRequest().get("search")
   				&& StringUtils.isNotBlank((String) $data.getRequest().get("search"))) {
   			Logger log = LoggerFactory.getLogger(Object.class);
   			XFSessionService xfSessionService = springUtils.getBean(XFSessionService.class);
   			DroolsService droolsService = springUtils.getBean(DroolsService.class);
   			EntityManager em = springUtils.getBean(EntityManagerResolver.class).getEntityManager();
   			try {
   				Long catalogue_pk = xfSessionService.getCommerceStoreInSession().getProductCatalogue().getPk();
   				Query q = em.createNativeQuery("SELECT * FROM ondc.sku WHERE MATCH (code,name,description) AGAINST (:search IN NATURAL LANGUAGE MODE) AND catalogue_pk = :catalogue_pk AND version = :version AND searchable = :searchable", SKU.class);
   			    ContextulizeSearch contextulizeSearch =  springUtils.getBean(ContextulizeSearch.class);
                q.setParameter("search",contextulizeSearch.contextulizedSearch(((String) $data.getRequest().get("search")).trim(),true));
   			//	q.setParameter("search", ((String) $data.getRequest().get("search")).trim());
   				q.setParameter("catalogue_pk", catalogue_pk);
   				q.setParameter("version", "1");
   				q.setParameter("searchable", "1");
   				q.setMaxResults(10);				
   				List<SKU> values = q.getResultList();
   				Map<String, Object> schema = new HashMap<>();
   				schema.put("pk", "");
   				schema.put("code", "");
   				schema.put("name", "");
   				List<Map<String, Object>> results = new ArrayList<>();
   				for (SKU sku : values) {
   					Map<String, Object> skuData = new HashMap<>();
   					List<Object> facts = new ArrayList<>();
   					facts.add(sku);
   					facts.add(skuData);
   					facts.add(new JSONObject(schema));
   					droolsService.fireDRL(facts, "xf-sku-populator", false, Map.of("springUtils", springUtils));
   					results.add(skuData);
   				}				
   				$data.getResponse().put("results", results);
   				$data.getResponse().put("status", 200);
   				$data.setResponseStatus(HttpStatus.OK);
   				return;
   			} catch (Exception e) {
   				$data.getResponse().put("status", 500);
   				$data.setResponseStatus(HttpStatus.OK);
   				return;
   			}
   		} else {
   			$data.getResponse().put("error", "Request Parameters Missing!");
   			$data.getResponse().put("status", 400);
   			$data.setResponseStatus(HttpStatus.BAD_REQUEST);
   		}
end
